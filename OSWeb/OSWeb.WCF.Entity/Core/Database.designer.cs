#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MWeb.WCF.Entity.Core
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MWeb")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertColumn(Column instance);
    partial void UpdateColumn(Column instance);
    partial void DeleteColumn(Column instance);
    partial void InsertData(Data instance);
    partial void UpdateData(Data instance);
    partial void DeleteData(Data instance);
    partial void InsertDatabase(Database instance);
    partial void UpdateDatabase(Database instance);
    partial void DeleteDatabase(Database instance);
    partial void InsertDataType(DataType instance);
    partial void UpdateDataType(DataType instance);
    partial void DeleteDataType(DataType instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertRelationshipType(RelationshipType instance);
    partial void UpdateRelationshipType(RelationshipType instance);
    partial void DeleteRelationshipType(RelationshipType instance);
    partial void InsertSchema(Schema instance);
    partial void UpdateSchema(Schema instance);
    partial void DeleteSchema(Schema instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::MWeb.WCF.Entity.Properties.Settings.Default.MWebConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Column> Columns
		{
			get
			{
				return this.GetTable<Column>();
			}
		}
		
		public System.Data.Linq.Table<Data> Datas
		{
			get
			{
				return this.GetTable<Data>();
			}
		}
		
		public System.Data.Linq.Table<Database> Databases
		{
			get
			{
				return this.GetTable<Database>();
			}
		}
		
		public System.Data.Linq.Table<DataHistory> DataHistories
		{
			get
			{
				return this.GetTable<DataHistory>();
			}
		}
		
		public System.Data.Linq.Table<DataType> DataTypes
		{
			get
			{
				return this.GetTable<DataType>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<RelationshipType> RelationshipTypes
		{
			get
			{
				return this.GetTable<RelationshipType>();
			}
		}
		
		public System.Data.Linq.Table<Schema> Schemas
		{
			get
			{
				return this.GetTable<Schema>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].[Column]")]
	public partial class Column : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Column;
		
		private System.Nullable<long> _Id_Table;
		
		private System.Nullable<long> _Id_Data_Type;
		
		private string _Name;
		
		private string _Length;
		
		private System.Nullable<bool> _Nullable;
		
		private System.Nullable<bool> _PrimaryKey;
		
		private EntitySet<Data> _Datas;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<Relationship> _Relationships1;
		
		private EntityRef<DataType> _DataType;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ColumnChanging(long value);
    partial void OnId_ColumnChanged();
    partial void OnId_TableChanging(System.Nullable<long> value);
    partial void OnId_TableChanged();
    partial void OnId_Data_TypeChanging(System.Nullable<long> value);
    partial void OnId_Data_TypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLengthChanging(string value);
    partial void OnLengthChanged();
    partial void OnNullableChanging(System.Nullable<bool> value);
    partial void OnNullableChanged();
    partial void OnPrimaryKeyChanging(System.Nullable<bool> value);
    partial void OnPrimaryKeyChanged();
    #endregion
		
		public Column()
		{
			this._Datas = new EntitySet<Data>(new Action<Data>(this.attach_Datas), new Action<Data>(this.detach_Datas));
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._Relationships1 = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships1), new Action<Relationship>(this.detach_Relationships1));
			this._DataType = default(EntityRef<DataType>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Column", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Column
		{
			get
			{
				return this._Id_Column;
			}
			set
			{
				if ((this._Id_Column != value))
				{
					this.OnId_ColumnChanging(value);
					this.SendPropertyChanging();
					this._Id_Column = value;
					this.SendPropertyChanged("Id_Column");
					this.OnId_ColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Table", DbType="BigInt")]
		public System.Nullable<long> Id_Table
		{
			get
			{
				return this._Id_Table;
			}
			set
			{
				if ((this._Id_Table != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_TableChanging(value);
					this.SendPropertyChanging();
					this._Id_Table = value;
					this.SendPropertyChanged("Id_Table");
					this.OnId_TableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Data_Type", DbType="BigInt")]
		public System.Nullable<long> Id_Data_Type
		{
			get
			{
				return this._Id_Data_Type;
			}
			set
			{
				if ((this._Id_Data_Type != value))
				{
					if (this._DataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_Data_TypeChanging(value);
					this.SendPropertyChanging();
					this._Id_Data_Type = value;
					this.SendPropertyChanged("Id_Data_Type");
					this.OnId_Data_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="VarChar(10)")]
		public string Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nullable", DbType="Bit")]
		public System.Nullable<bool> Nullable
		{
			get
			{
				return this._Nullable;
			}
			set
			{
				if ((this._Nullable != value))
				{
					this.OnNullableChanging(value);
					this.SendPropertyChanging();
					this._Nullable = value;
					this.SendPropertyChanged("Nullable");
					this.OnNullableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryKey", DbType="Bit")]
		public System.Nullable<bool> PrimaryKey
		{
			get
			{
				return this._PrimaryKey;
			}
			set
			{
				if ((this._PrimaryKey != value))
				{
					this.OnPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKey = value;
					this.SendPropertyChanged("PrimaryKey");
					this.OnPrimaryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Data", Storage="_Datas", ThisKey="Id_Column", OtherKey="Id_Column")]
		public EntitySet<Data> Datas
		{
			get
			{
				return this._Datas;
			}
			set
			{
				this._Datas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Relationship", Storage="_Relationships", ThisKey="Id_Column", OtherKey="Id_Column_Destiny")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Relationship1", Storage="_Relationships1", ThisKey="Id_Column", OtherKey="Id_Column_Source")]
		public EntitySet<Relationship> Relationships1
		{
			get
			{
				return this._Relationships1;
			}
			set
			{
				this._Relationships1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataType_Column", Storage="_DataType", ThisKey="Id_Data_Type", OtherKey="Id_Data_Type", IsForeignKey=true)]
		public DataType DataType
		{
			get
			{
				return this._DataType.Entity;
			}
			set
			{
				DataType previousValue = this._DataType.Entity;
				if (((previousValue != value) 
							|| (this._DataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataType.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._DataType.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._Id_Data_Type = value.Id_Data_Type;
					}
					else
					{
						this._Id_Data_Type = default(Nullable<long>);
					}
					this.SendPropertyChanged("DataType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column", Storage="_Table", ThisKey="Id_Table", OtherKey="Id_Table", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._Id_Table = value.Id_Table;
					}
					else
					{
						this._Id_Table = default(Nullable<long>);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Datas(Data entity)
		{
			this.SendPropertyChanging();
			entity.Column = this;
		}
		
		private void detach_Datas(Data entity)
		{
			this.SendPropertyChanging();
			entity.Column = null;
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Column = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Column = null;
		}
		
		private void attach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Column1 = this;
		}
		
		private void detach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Column1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].Data")]
	public partial class Data : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id_Data;
		
		private long _Id_Column;
		
		private long _Row;
		
		private string _Value;
		
		private EntityRef<Column> _Column;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DataChanging(string value);
    partial void OnId_DataChanged();
    partial void OnId_ColumnChanging(long value);
    partial void OnId_ColumnChanged();
    partial void OnRowChanging(long value);
    partial void OnRowChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Data()
		{
			this._Column = default(EntityRef<Column>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Data", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id_Data
		{
			get
			{
				return this._Id_Data;
			}
			set
			{
				if ((this._Id_Data != value))
				{
					this.OnId_DataChanging(value);
					this.SendPropertyChanging();
					this._Id_Data = value;
					this.SendPropertyChanged("Id_Data");
					this.OnId_DataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Column", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long Id_Column
		{
			get
			{
				return this._Id_Column;
			}
			set
			{
				if ((this._Id_Column != value))
				{
					if (this._Column.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ColumnChanging(value);
					this.SendPropertyChanging();
					this._Id_Column = value;
					this.SendPropertyChanged("Id_Column");
					this.OnId_ColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row", DbType="BigInt NOT NULL")]
		public long Row
		{
			get
			{
				return this._Row;
			}
			set
			{
				if ((this._Row != value))
				{
					this.OnRowChanging(value);
					this.SendPropertyChanging();
					this._Row = value;
					this.SendPropertyChanged("Row");
					this.OnRowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Data", Storage="_Column", ThisKey="Id_Column", OtherKey="Id_Column", IsForeignKey=true)]
		public Column Column
		{
			get
			{
				return this._Column.Entity;
			}
			set
			{
				Column previousValue = this._Column.Entity;
				if (((previousValue != value) 
							|| (this._Column.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column.Entity = null;
						previousValue.Datas.Remove(this);
					}
					this._Column.Entity = value;
					if ((value != null))
					{
						value.Datas.Add(this);
						this._Id_Column = value.Id_Column;
					}
					else
					{
						this._Id_Column = default(long);
					}
					this.SendPropertyChanged("Column");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].[Database]")]
	public partial class Database : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Database;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Schema> _Schemas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DatabaseChanging(long value);
    partial void OnId_DatabaseChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Database()
		{
			this._Schemas = new EntitySet<Schema>(new Action<Schema>(this.attach_Schemas), new Action<Schema>(this.detach_Schemas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Database", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Database
		{
			get
			{
				return this._Id_Database;
			}
			set
			{
				if ((this._Id_Database != value))
				{
					this.OnId_DatabaseChanging(value);
					this.SendPropertyChanging();
					this._Id_Database = value;
					this.SendPropertyChanged("Id_Database");
					this.OnId_DatabaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_Schema", Storage="_Schemas", ThisKey="Id_Database", OtherKey="Id_Database")]
		public EntitySet<Schema> Schemas
		{
			get
			{
				return this._Schemas;
			}
			set
			{
				this._Schemas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schemas(Schema entity)
		{
			this.SendPropertyChanging();
			entity.Database = this;
		}
		
		private void detach_Schemas(Schema entity)
		{
			this.SendPropertyChanging();
			entity.Database = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].DataHistory")]
	public partial class DataHistory
	{
		
		private System.Nullable<long> _Id_Column;
		
		private System.Nullable<long> _Row;
		
		private string _Action;
		
		private string _Value;
		
		private System.Nullable<System.DateTime> _Date;
		
		public DataHistory()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Column", DbType="BigInt")]
		public System.Nullable<long> Id_Column
		{
			get
			{
				return this._Id_Column;
			}
			set
			{
				if ((this._Id_Column != value))
				{
					this._Id_Column = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row", DbType="BigInt")]
		public System.Nullable<long> Row
		{
			get
			{
				return this._Row;
			}
			set
			{
				if ((this._Row != value))
				{
					this._Row = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="VarChar(10)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this._Action = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].DataType")]
	public partial class DataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Data_Type;
		
		private string _Name;
		
		private EntitySet<Column> _Columns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_Data_TypeChanging(long value);
    partial void OnId_Data_TypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataType()
		{
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Data_Type", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Data_Type
		{
			get
			{
				return this._Id_Data_Type;
			}
			set
			{
				if ((this._Id_Data_Type != value))
				{
					this.OnId_Data_TypeChanging(value);
					this.SendPropertyChanging();
					this._Id_Data_Type = value;
					this.SendPropertyChanged("Id_Data_Type");
					this.OnId_Data_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataType_Column", Storage="_Columns", ThisKey="Id_Data_Type", OtherKey="Id_Data_Type")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.DataType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].Relationship")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Relationship;
		
		private System.Nullable<long> _Id_Column_Source;
		
		private System.Nullable<long> _Id_Column_Destiny;
		
		private System.Nullable<long> _Id_Relationship_Type;
		
		private EntityRef<Column> _Column;
		
		private EntityRef<Column> _Column1;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_RelationshipChanging(long value);
    partial void OnId_RelationshipChanged();
    partial void OnId_Column_SourceChanging(System.Nullable<long> value);
    partial void OnId_Column_SourceChanged();
    partial void OnId_Column_DestinyChanging(System.Nullable<long> value);
    partial void OnId_Column_DestinyChanged();
    partial void OnId_Relationship_TypeChanging(System.Nullable<long> value);
    partial void OnId_Relationship_TypeChanged();
    #endregion
		
		public Relationship()
		{
			this._Column = default(EntityRef<Column>);
			this._Column1 = default(EntityRef<Column>);
			this._RelationshipType = default(EntityRef<RelationshipType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Relationship", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Relationship
		{
			get
			{
				return this._Id_Relationship;
			}
			set
			{
				if ((this._Id_Relationship != value))
				{
					this.OnId_RelationshipChanging(value);
					this.SendPropertyChanging();
					this._Id_Relationship = value;
					this.SendPropertyChanged("Id_Relationship");
					this.OnId_RelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Column_Source", DbType="BigInt")]
		public System.Nullable<long> Id_Column_Source
		{
			get
			{
				return this._Id_Column_Source;
			}
			set
			{
				if ((this._Id_Column_Source != value))
				{
					if (this._Column1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_Column_SourceChanging(value);
					this.SendPropertyChanging();
					this._Id_Column_Source = value;
					this.SendPropertyChanged("Id_Column_Source");
					this.OnId_Column_SourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Column_Destiny", DbType="BigInt")]
		public System.Nullable<long> Id_Column_Destiny
		{
			get
			{
				return this._Id_Column_Destiny;
			}
			set
			{
				if ((this._Id_Column_Destiny != value))
				{
					if (this._Column.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_Column_DestinyChanging(value);
					this.SendPropertyChanging();
					this._Id_Column_Destiny = value;
					this.SendPropertyChanged("Id_Column_Destiny");
					this.OnId_Column_DestinyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Relationship_Type", DbType="BigInt")]
		public System.Nullable<long> Id_Relationship_Type
		{
			get
			{
				return this._Id_Relationship_Type;
			}
			set
			{
				if ((this._Id_Relationship_Type != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_Relationship_TypeChanging(value);
					this.SendPropertyChanging();
					this._Id_Relationship_Type = value;
					this.SendPropertyChanged("Id_Relationship_Type");
					this.OnId_Relationship_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Relationship", Storage="_Column", ThisKey="Id_Column_Destiny", OtherKey="Id_Column", IsForeignKey=true)]
		public Column Column
		{
			get
			{
				return this._Column.Entity;
			}
			set
			{
				Column previousValue = this._Column.Entity;
				if (((previousValue != value) 
							|| (this._Column.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Column.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._Id_Column_Destiny = value.Id_Column;
					}
					else
					{
						this._Id_Column_Destiny = default(Nullable<long>);
					}
					this.SendPropertyChanged("Column");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Relationship1", Storage="_Column1", ThisKey="Id_Column_Source", OtherKey="Id_Column", IsForeignKey=true)]
		public Column Column1
		{
			get
			{
				return this._Column1.Entity;
			}
			set
			{
				Column previousValue = this._Column1.Entity;
				if (((previousValue != value) 
							|| (this._Column1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column1.Entity = null;
						previousValue.Relationships1.Remove(this);
					}
					this._Column1.Entity = value;
					if ((value != null))
					{
						value.Relationships1.Add(this);
						this._Id_Column_Source = value.Id_Column;
					}
					else
					{
						this._Id_Column_Source = default(Nullable<long>);
					}
					this.SendPropertyChanged("Column1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_Relationship", Storage="_RelationshipType", ThisKey="Id_Relationship_Type", OtherKey="Id_Relationship_Type", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._Id_Relationship_Type = value.Id_Relationship_Type;
					}
					else
					{
						this._Id_Relationship_Type = default(Nullable<long>);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].RelationshipType")]
	public partial class RelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Relationship_Type;
		
		private string _Name;
		
		private EntitySet<Relationship> _Relationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_Relationship_TypeChanging(long value);
    partial void OnId_Relationship_TypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RelationshipType()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Relationship_Type", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Relationship_Type
		{
			get
			{
				return this._Id_Relationship_Type;
			}
			set
			{
				if ((this._Id_Relationship_Type != value))
				{
					this.OnId_Relationship_TypeChanging(value);
					this.SendPropertyChanging();
					this._Id_Relationship_Type = value;
					this.SendPropertyChanged("Id_Relationship_Type");
					this.OnId_Relationship_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_Relationship", Storage="_Relationships", ThisKey="Id_Relationship_Type", OtherKey="Id_Relationship_Type")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].[Schema]")]
	public partial class Schema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Schema;
		
		private System.Nullable<long> _Id_Database;
		
		private string _Name;
		
		private EntitySet<Table> _Tables;
		
		private EntityRef<Database> _Database;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_SchemaChanging(long value);
    partial void OnId_SchemaChanged();
    partial void OnId_DatabaseChanging(System.Nullable<long> value);
    partial void OnId_DatabaseChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Schema()
		{
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			this._Database = default(EntityRef<Database>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Schema", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Schema
		{
			get
			{
				return this._Id_Schema;
			}
			set
			{
				if ((this._Id_Schema != value))
				{
					this.OnId_SchemaChanging(value);
					this.SendPropertyChanging();
					this._Id_Schema = value;
					this.SendPropertyChanged("Id_Schema");
					this.OnId_SchemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Database", DbType="BigInt")]
		public System.Nullable<long> Id_Database
		{
			get
			{
				return this._Id_Database;
			}
			set
			{
				if ((this._Id_Database != value))
				{
					if (this._Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DatabaseChanging(value);
					this.SendPropertyChanging();
					this._Id_Database = value;
					this.SendPropertyChanged("Id_Database");
					this.OnId_DatabaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schema_Table", Storage="_Tables", ThisKey="Id_Schema", OtherKey="Id_Schema")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_Schema", Storage="_Database", ThisKey="Id_Database", OtherKey="Id_Database", IsForeignKey=true)]
		public Database Database
		{
			get
			{
				return this._Database.Entity;
			}
			set
			{
				Database previousValue = this._Database.Entity;
				if (((previousValue != value) 
							|| (this._Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Database.Entity = null;
						previousValue.Schemas.Remove(this);
					}
					this._Database.Entity = value;
					if ((value != null))
					{
						value.Schemas.Add(this);
						this._Id_Database = value.Id_Database;
					}
					else
					{
						this._Id_Database = default(Nullable<long>);
					}
					this.SendPropertyChanged("Database");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Schema = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Schema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[database].[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id_Table;
		
		private System.Nullable<long> _Id_Schema;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Column> _Columns;
		
		private EntityRef<Schema> _Schema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_TableChanging(long value);
    partial void OnId_TableChanged();
    partial void OnId_SchemaChanging(System.Nullable<long> value);
    partial void OnId_SchemaChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Table()
		{
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			this._Schema = default(EntityRef<Schema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Table", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id_Table
		{
			get
			{
				return this._Id_Table;
			}
			set
			{
				if ((this._Id_Table != value))
				{
					this.OnId_TableChanging(value);
					this.SendPropertyChanging();
					this._Id_Table = value;
					this.SendPropertyChanged("Id_Table");
					this.OnId_TableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Schema", DbType="BigInt")]
		public System.Nullable<long> Id_Schema
		{
			get
			{
				return this._Id_Schema;
			}
			set
			{
				if ((this._Id_Schema != value))
				{
					if (this._Schema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_SchemaChanging(value);
					this.SendPropertyChanging();
					this._Id_Schema = value;
					this.SendPropertyChanged("Id_Schema");
					this.OnId_SchemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column", Storage="_Columns", ThisKey="Id_Table", OtherKey="Id_Table")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schema_Table", Storage="_Schema", ThisKey="Id_Schema", OtherKey="Id_Schema", IsForeignKey=true)]
		public Schema Schema
		{
			get
			{
				return this._Schema.Entity;
			}
			set
			{
				Schema previousValue = this._Schema.Entity;
				if (((previousValue != value) 
							|| (this._Schema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schema.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Schema.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._Id_Schema = value.Id_Schema;
					}
					else
					{
						this._Id_Schema = default(Nullable<long>);
					}
					this.SendPropertyChanged("Schema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
	}
}
#pragma warning restore 1591
